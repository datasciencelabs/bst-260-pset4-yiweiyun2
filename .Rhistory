group_by(year) |>
mutate(state_order = reorder(state_name, population)) |>
ungroup() |>
ggplot(aes(x = population, y = state_order)) +
geom_col() +
facet_wrap(~ year) +
labs(title = "State populations", x = "Population", y = "State") +
theme(
plot.title = element_text(face = "bold", size = 16),
axis.text  = element_text(size = 6)
)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
regions_list <- fromJSON(url2, simplifyVector = FALSE)
regions <- map_df(regions_list, function(region_item) {
tibble(
state_name = unlist(region_item$states),
region = region_item$region[[1]],
region_name = region_item$region_name
)
})
regions <- regions |>
filter(state_name %in% c(state.name, "District of Columbia", "Puerto Rico")) |>
mutate(region_name = ifelse(region_name ==
"New York and New Jersey, Puerto Rico, Virgin Islands",
"NY/NJ & Territories",
region_name))
regions
population <- population |>
left_join(regions, by = "state_name")
population
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
cases_raw
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases <- request("https://data.cdc.gov/resource/pwn4-m3yp.json") |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
transmute(
state,
date  = as.Date(end_date),
cases = suppressWarnings(as.numeric(new_cases))
) |>
arrange(state, date)
cases
cases |>
filter(between(date, as.Date("2020-01-01"), as.Date("2021-12-31"))) |>
mutate(year = year(date)) |>
left_join(
population |>
mutate(year = as.integer(year)) |>
select(state, year, population, region_name),
by = c("state","year")
) |>
filter(!is.na(.data$population), !is.na(.data$region_name)) |>
mutate(cases_per_100k = cases / .data$population * 1e5) |>
ggplot(aes(x = date, y = cases_per_100k, group = state)) +
geom_line(alpha = 0.6, linewidth = 0.3) +
facet_wrap(~ region_name, scales = "free_y") +
labs(
title = "Daily COVID-19 Cases per 100,000 by State (2020–2021)",
subtitle = "Rates use year-matched state populations",
x = "Date", y = "New cases per 100,000"
)
# ggplot(cases_plot, aes(x = date, y = cases_per_100k, group = state)) +
#   geom_line(alpha = 0.6) +
#   geom_text(data = labels, aes(label = state), size = 2.5,
#             hjust = 0, vjust = 0, check_overlap = TRUE) +
#   facet_wrap(~ region_name) +
#   labs(
#     title   = "Daily SARS-CoV-2 Cases per 100,000 by State in 2020–2021",
#     subtitle= "Rates use year-matched state populations",
#     x = "Date",
#     y = "Cases per 100,000",
#   )
cases |>
filter(between(date, as.Date("2020-01-01"), as.Date("2021-12-31"))) |>
mutate(year = year(date)) |>
left_join(
population |>
select(state, year, population, region_name),
by = c("state","year")
) |>
filter(!is.na(.data$population), !is.na(.data$region_name)) |>
mutate(cases_per_100k = cases / .data$population * 1e5) |>
ggplot(aes(x = date, y = cases_per_100k, group = state)) +
geom_line(alpha = 0.6, linewidth = 0.3) +
facet_wrap(~ region_name, scales = "free_y") +
labs(
title = "Daily COVID-19 Cases per 100,000 by State (2020–2021)",
subtitle = "Rates use year-matched state populations",
x = "Date", y = "New cases per 100,000"
)
cases |>
filter(between(date, as.Date("2020-01-01"), as.Date("2021-12-31"))) |>
mutate(year = year(date)) |>
left_join(population, by = c("state","year")) |>
filter(!is.na(.data$population), !is.na(.data$region_name)) |>
mutate(cases_per_100k = cases / .data$population * 1e5) |>
ggplot(aes(x = date, y = cases_per_100k, group = state)) +
geom_line(alpha = 0.6, linewidth = 0.3) +
facet_wrap(~ region_name, scales = "free_y") +
labs(
title = "Daily COVID-19 Cases per 100,000 by State (2020–2021)",
subtitle = "Rates use year-matched state populations",
x = "Date", y = "New cases per 100,000"
)
cases |>
filter(between(date, as.Date("2020-01-01"), as.Date("2021-12-31"))) |>
mutate(year = year(date)) |>
left_join(population, by = c("state","year")) |>
filter(!is.na(.data$population), !is.na(.data$region_name)) |>
mutate(cases_per_100k = cases / .data$population * 1e5) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line(alpha = 0.6, linewidth = 0.3) +
facet_wrap(~ region_name,) +
labs(
title = "Daily COVID-19 Cases per 100,000 by State (2020–2021)",
subtitle = "Rates use year-matched state populations",
x = "Date", y = "New cases per 100,000"
)
View(model_quad_spline)
library(lubridate)
library(knitr)
cases |>
mutate(
date  = ymd(date),
cases = as.numeric(cases)
) |>
filter(date >= ymd("2020-01-01"), date <= ymd("2021-12-31")) |>
group_by(
year      = year(date),
month_num = month(date),
month     = month(date, label = TRUE, abbr = FALSE)
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month, total_cases) |>
kable(
col.names = c("Year", "Month", "Total cases"),
align = c("c", "l", "r"),
caption = "Total COVID-19 new cases by month across all states (2020–2021)"
)
library(lubridate)
library(knitr)
cases |>
mutate(
date  = ymd(date),
cases = as.numeric(cases)
) |>
filter(date >= ymd("2020-01-01"), date <= ymd("2021-12-31")) |>
group_by(
year      = year(date),
month_num = month(date),
month     = month(date, label = TRUE, abbr = FALSE)
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month, total_cases) |>
kable()
library(lubridate)
library(knitr)
cases |>
mutate(
date  = ymd(date),
cases = as.numeric(cases)
) |>
filter(date >= ymd("2020-01-01"), date <= ymd("2021-12-31")) |>
group_by(year, month) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month, total_cases) |>
kable()
library(lubridate)
library(knitr)
cases |>
mutate(
date  = ymd(date),
cases = as.numeric(cases),
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE)
) |>
filter(year %in% c(2020, 2021)) |>
group_by(year, month) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month) |>
kable(
col.names = c("Year", "Month", "Total cases"),
align = c("c","l","r"),
caption = "Total COVID-19 new cases by month across all states (2020–2021)"
)
library(lubridate)
library(knitr)
cases |>
mutate(
date  = ymd(date),
cases = as.numeric(cases),
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE)
) |>
filter(year %in% c(2020, 2021)) |>
group_by(year, month) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month) |>
kable()
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
deaths <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
(\(df) {
df$date   <- as.Date(df$end_date)
df$deaths <- suppressWarnings(as.numeric(df$covid_19_deaths))
df[, c("state", "date", "deaths")]
})()
deaths
deaths <- deaths |>
filter(state != "United States") |>
group_by(state) |>
summarise(total_deaths = max(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(highest_10_state,
aes(x = reorder(state, total_deaths), y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = "State",
y = "Total deaths"
)
deaths <- deaths |>
filter(state != "United States") |>
group_by(state) |>
summarise(total_deaths = max(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(highest_10_state,
aes(x = reorder(state, total_deaths), y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = "State",
y = "Total deaths"
)
deaths <- deaths |>
filter(state != "United States") |>
group_by(state) |>
summarise(total_deaths = max(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, total_deaths), y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = "State",
y = "Total deaths"
)
highest_10_state
deaths <- deaths |>
filter(state != "United States") |>
group_by(state) |>
summarise(total_deaths = max(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, total_deaths), y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = "State",
y = "Total deaths"
)
deaths <- deaths |>
filter(state != "United States") |>
group_by(state) |>
summarise(total_deaths = max(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, total_deaths), y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = "State",
y = "Total deaths"
)
deaths <- filter(state != "United States") |>
group_by(state) |>
summarise(total_deaths = max(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, total_deaths), y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = "State",
y = "Total deaths"
)
deaths |>
filter(state != "United States") |>
group_by(state) |>
summarise(total_deaths = max(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, total_deaths), y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = "State",
y = "Total deaths"
)
deaths |>
filter(state != "United States") |>
group_by(state) |>
summarise(total_deaths = max(deaths, na.rm = TRUE), .groups = "drop") |>  # use sum(...) if not cumulative
slice_max(total_deaths, n = 10, with_ties = FALSE) |>
ggplot(aes(x = reorder(state, total_deaths), y = total_deaths)) +
geom_col() +
coord_flip() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = "State",
y = "Total deaths (cumulative)"
) +
theme_minimal()
deaths <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
(\(df) {
df$date   <- as.Date(df$end_date)
df$deaths <- suppressWarnings(as.numeric(df$covid_19_deaths))
df[, c("state", "date", "deaths")]
})()
deaths
deaths |>
filter(state != "United States") |>
group_by(state) |>
summarise(total_deaths = max(deaths, na.rm = TRUE), .groups = "drop") |>  # use sum(...) if not cumulative
slice_max(total_deaths, n = 10, with_ties = FALSE) |>
ggplot(aes(x = reorder(state, total_deaths), y = total_deaths)) +
geom_col() +
coord_flip() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = "State",
y = "Total deaths (cumulative)"
) +
theme_minimal()
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request(url) |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key
)
request
response <- req_perform(request)
resp_status(response)
content_type <- resp_content_type(response)
content_type
population <- response |> resp_body_json(simplifyVector = TRUE)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- population |>
as_tibble(.name_repair = "minimal") |>  # convert to tibble
row_to_names(row_number = 1) |> # Use janitor row to names function
select(-state) |> # remove stat column
rename(state_name = NAME)|> # rename state column to state_name
pivot_longer(
cols = c(POP_2020, POP_2021),   # use pivot_longer to tidy
names_to = "year",
values_to = "population"
) |>
mutate(
year = as.integer(sub("POP_", "", year)), # remove POP_ from year
population = as.numeric(population) # parese all relevant columns to numeric
) |>
left_join(tibble(state_name = state.name, state = state.abb),
by = "state_name") |> # add state abbreviations using state.abb variable
mutate(  # use case_when to add abbreviations for DC and PR
state = case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico"          ~ "PR",
TRUE                                 ~ state
)
)
population
population |>
group_by(year) |>
mutate(state_order = reorder(state_name, population)) |>
ungroup() |>
ggplot(aes(x = population, y = state_order)) +
geom_col() +
facet_wrap(~ year) +
labs(title = "State populations", x = "Population", y = "State") +
theme(
plot.title = element_text(face = "bold", size = 16),
axis.text  = element_text(size = 6)
)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
regions_list <- fromJSON(url2, simplifyVector = FALSE)
regions <- map_df(regions_list, function(region_item) {
tibble(
state_name = unlist(region_item$states),
region = region_item$region[[1]],
region_name = region_item$region_name
)
})
regions <- regions |>
filter(state_name %in% c(state.name, "District of Columbia", "Puerto Rico")) |>
mutate(region_name = ifelse(region_name ==
"New York and New Jersey, Puerto Rico, Virgin Islands",
"NY/NJ & Territories",
region_name))
regions
population <- population |>
left_join(regions, by = "state_name")
population
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
cases_raw
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases <- request("https://data.cdc.gov/resource/pwn4-m3yp.json") |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
transmute(
state,
date  = as.Date(end_date),
cases = suppressWarnings(as.numeric(new_cases))
) |>
arrange(state, date)
cases
cases |>
filter(between(date, as.Date("2020-01-01"), as.Date("2021-12-31"))) |>
mutate(year = year(date)) |>
left_join(population, by = c("state","year")) |>
filter(!is.na(.data$population), !is.na(.data$region_name)) |>
mutate(cases_per_100k = cases / .data$population * 1e5) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line(alpha = 0.6, linewidth = 0.3) +
facet_wrap(~ region_name,) +
labs(
title = "Daily COVID-19 Cases per 100,000 by State (2020–2021)",
subtitle = "Rates use year-matched state populations",
x = "Date", y = "New cases per 100,000"
)
library(lubridate)
library(knitr)
cases |>
mutate(
date  = ymd(date),
cases = as.numeric(cases),
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE)
) |>
filter(year %in% c(2020, 2021)) |>
group_by(year, month) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month) |>
kable()
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
deaths <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
(\(df) {
df$date   <- as.Date(df$end_date)
df$deaths <- suppressWarnings(as.numeric(df$covid_19_deaths))
df[, c("state", "date", "deaths")]
})()
deaths
deaths |>
filter(state != "United States") |>
group_by(state) |>
summarise(total_deaths = max(deaths, na.rm = TRUE), .groups = "drop") |>  # use sum(...) if not cumulative
slice_max(total_deaths, n = 10, with_ties = FALSE) |>
ggplot(aes(x = reorder(state, total_deaths), y = total_deaths)) +
geom_col() +
coord_flip() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = "State",
y = "Total deaths (cumulative)"
) +
theme_minimal()
